{"version":3,"sources":["ProtimeRow.tsx","Protime.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ProtimeRow","handleNameChange","evt","props","onNameChange","index","target","value","handlePercentChange","onPercentChange","handleRemove","onRemove","this","name","percent","totalDays","fullDays","hours","type","placeholder","onChange","Math","round","Number","className","onClick","undefined","disabled","React","Component","defaultState","days","hoursPerDay","projectTimes","Protime","handleDaysChange","setState","handleHoursPerDayChange","state","map","item","idx","filter","_","handleAddProjectClick","reduce","delta","concat","toString","ls","localStorage","getItem","JSON","parse","setItem","stringify","calculatedProjectTimes","floor","totalPercent","totalTotalDays","totalFullDays","totalHours","key","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d186d4d.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface ProtimeRowProps {\n  name: string;\n  percent: string | number;\n  totalDays: string | number;\n  fullDays: string | number;\n  hours: string | number;\n  index: number;\n  onNameChange: (index: number, value: string) => void;\n  onPercentChange: (index: number, value: string) => void;\n  onRemove?: (index: number) => void;\n}\n\nexport class ProtimeRow extends React.Component<ProtimeRowProps> {\n  render() {\n    const { name, percent, totalDays, fullDays, hours } = this.props;\n    return (\n      <tr>\n        <td>\n          <input\n            type=\"text\"\n            placeholder=\"Enter name\"\n            value={name}\n            onChange={this.handleNameChange}\n          />\n        </td>\n        <td>\n          <input\n            type=\"number\"\n            placeholder=\"Enter percent\"\n            value={percent}\n            onChange={this.handlePercentChange}\n          />\n        </td>\n        <td>\n          <div>{totalDays}</div>\n        </td>\n        <td>\n          <div>{fullDays}</div>\n        </td>\n        <td>\n          <div>{Math.round(Number(hours) * 100) / 100}</div>\n        </td>\n        <td>\n          <button\n            type=\"button\"\n            className=\"pure-button button-warning\"\n            onClick={this.props.onRemove ? this.handleRemove : undefined}\n            disabled={this.props.onRemove === undefined}\n          >\n            Remove\n          </button>\n        </td>\n      </tr>\n    );\n  }\n\n  private handleNameChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.onNameChange(this.props.index, evt.target.value);\n  };\n\n  private handlePercentChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.props.onPercentChange(this.props.index, evt.target.value);\n  };\n\n  private handleRemove = () => {\n    if (this.props.onRemove) {\n      this.props.onRemove(this.props.index);\n    }\n  };\n}\n","import React from \"react\";\nimport \"./Protime.scss\";\nimport { ProtimeRow } from \"./ProtimeRow\";\n\nexport interface ProjectTime {\n  name: string;\n  percent: string;\n}\n\nexport interface ProtimeState {\n  days: string;\n  hoursPerDay: string;\n  projectTimes: ProjectTime[];\n}\n\nconst defaultState: ProtimeState = {\n  days: \"20\",\n  hoursPerDay: \"8.4\",\n  projectTimes: [{ name: \"\", percent: \"100\" }],\n};\n\nexport class Protime extends React.Component<{}, ProtimeState> {\n  constructor(props: any) {\n    super(props);\n    const ls = localStorage.getItem(\"protime\");\n    if (ls) {\n      this.state = {\n        ...defaultState,\n        ...JSON.parse(ls),\n      };\n    } else {\n      this.state = {\n        ...defaultState,\n      };\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem(\"protime\", JSON.stringify(this.state));\n  }\n\n  render() {\n    const calculatedProjectTimes = this.state.projectTimes.map(\n      ({ name, percent }) => {\n        const totalDays = (Number(this.state.days) * Number(percent)) / 100;\n        const fullDays = Math.floor(totalDays);\n        const hours = (totalDays - fullDays) * Number(this.state.hoursPerDay);\n\n        return {\n          name,\n          percent,\n          totalDays,\n          fullDays,\n          hours,\n        };\n      }\n    );\n\n    const totalPercent = calculatedProjectTimes.reduce(\n      (totalPercent, { percent }) => {\n        return totalPercent + Number(percent);\n      },\n      0\n    );\n\n    const totalTotalDays = calculatedProjectTimes.reduce(\n      (totalTotalDays, { totalDays }) => {\n        return totalTotalDays + Number(totalDays);\n      },\n      0\n    );\n\n    const totalFullDays = calculatedProjectTimes.reduce(\n      (totalFullDays, { fullDays }) => {\n        return totalFullDays + Number(fullDays);\n      },\n      0\n    );\n\n    const totalHours =\n      Math.round(\n        calculatedProjectTimes.reduce((totalHours, { hours }) => {\n          return totalHours + Number(hours);\n        }, 0) * 100\n      ) / 100;\n\n    return (\n      <div className=\"Protime\">\n        <form className=\"pure-form\">\n          <fieldset>\n            <div className=\"pure-g config\">\n              <input\n                type=\"number\"\n                name=\"days\"\n                placeholder=\"Days\"\n                onChange={this.handleDaysChange}\n                value={this.state.days}\n              />\n\n              <input\n                type=\"number\"\n                name=\"hoursPerDay\"\n                placeholder=\"Hours per day\"\n                onChange={this.handleHoursPerDayChange}\n                value={this.state.hoursPerDay}\n              />\n\n              <button\n                type=\"button\"\n                className=\"pure-button pure-button-primary\"\n                onClick={this.handleAddProjectClick}\n              >\n                Add Project\n              </button>\n            </div>\n\n            <table>\n              <thead>\n                <tr>\n                  <th>Project Name</th>\n                  <th>Booking Percentage</th>\n                  <th>Total Days</th>\n                  <th>Full Days</th>\n                  <th>Hours</th>\n                  <th>&nbsp;</th>\n                </tr>\n              </thead>\n              <tbody>\n                {calculatedProjectTimes.map(\n                  ({ name, percent, totalDays, fullDays, hours }, idx) => (\n                    <ProtimeRow\n                      index={idx}\n                      key={idx}\n                      name={name}\n                      percent={percent}\n                      totalDays={totalDays}\n                      fullDays={fullDays}\n                      hours={hours}\n                      onNameChange={this.handleNameChange}\n                      onPercentChange={this.handlePercentChange}\n                      onRemove={\n                        this.state.projectTimes.length > 1\n                          ? this.handleRemove\n                          : undefined\n                      }\n                    />\n                  )\n                )}\n              </tbody>\n              <tfoot>\n                <tr>\n                  <td>Totals</td>\n                  <td>\n                    <div className={totalPercent !== 100 ? \"invalid\" : \"\"}>\n                      {totalPercent}\n                    </div>\n                  </td>\n                  <td>\n                    <div>{totalTotalDays}</div>\n                  </td>\n                  <td>\n                    <div>{totalFullDays}</div>\n                  </td>\n                  <td>\n                    <div>{totalHours}</div>\n                  </td>\n                </tr>\n              </tfoot>\n            </table>\n          </fieldset>\n        </form>\n      </div>\n    );\n  }\n\n  private handleDaysChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      days: evt?.target?.value,\n    });\n  };\n\n  private handleHoursPerDayChange = (\n    evt: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    this.setState({\n      hoursPerDay: evt?.target?.value,\n    });\n  };\n\n  private handleNameChange = (index: number, name: string) => {\n    this.setState({\n      projectTimes: this.state.projectTimes.map((item, idx) => {\n        if (idx === index) {\n          return { ...item, name };\n        }\n        return item;\n      }),\n    });\n  };\n\n  private handlePercentChange = (index: number, percent: string) => {\n    this.setState({\n      projectTimes: this.state.projectTimes.map((item, idx) => {\n        if (idx === index) {\n          return { ...item, percent };\n        }\n        return item;\n      }),\n    });\n  };\n\n  private handleRemove = (index: number) => {\n    this.setState({\n      projectTimes: this.state.projectTimes.filter((_, idx) => idx !== index),\n    });\n  };\n\n  private handleAddProjectClick = () => {\n    const percent = this.state.projectTimes.reduce((delta, { percent }) => {\n      return delta - Number(percent);\n    }, 100);\n    this.setState({\n      projectTimes: this.state.projectTimes.concat({\n        name: \"\",\n        percent: percent.toString(),\n      }),\n    });\n  };\n}\n","import React from 'react';\nimport './App.scss';\nimport { Protime } from \"./Protime\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        Protime Calculator\n      </header>\n      <Protime />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}